package com.dauladailuc.system;

import net.minecraft.world.entity.player.Player;
import net.minecraft.network.chat.Component;
import java.util.*;

/**
 * H·ªÜ TH·ªêNG √ÅM KH√ç ƒê∆Ø·ªúNG M√îN (Tang Sect Weapon System)
 * - Cho ph√©p ch·∫ø t·∫°o, s·ª≠ d·ª•ng v√† n√¢ng c·∫•p √°m kh√≠.
 * - G·ªìm 3 lo·∫°i: Th·ªß c√¥ng, T·ª± ƒë·ªông, ƒê·∫∑c ch·∫ø.
 * - C√≥ th·ªÉ kh·∫£m n·∫°p h·ªìn l·ª±c ƒë·ªÉ tƒÉng s·ª©c m·∫°nh.
 * - M·ªói √°m kh√≠ c√≥ ƒë·ªô b·ªÅn, s√°t th∆∞∆°ng, k·ªπ nƒÉng ri√™ng.
 */

public class TangSectWeaponSystem {

    public static class HiddenWeapon {
        public final String name;
        public final int tier;
        public double baseDamage;
        public int durability;
        public String type;
        public String abilityDescription;
        public double cooldown;

        public HiddenWeapon(String name, int tier, double damage, int durability, String type, String ability, double cooldown) {
            this.name = name;
            this.tier = tier;
            this.baseDamage = damage;
            this.durability = durability;
            this.type = type;
            this.abilityDescription = ability;
            this.cooldown = cooldown;
        }
    }

    // ========================= DANH S√ÅCH √ÅM KH√ç =========================
    public static final HiddenWeapon TANGLOTUS = new HiddenWeapon(
            "Ph·∫≠t N·ªô ƒê∆∞·ªùng Li√™n", 5,
            500.0, 20, "ƒê·∫∑c ch·∫ø",
            "G√¢y n·ªï di·ªán r·ªông, s√°t th∆∞∆°ng c·ª±c cao. D√πng 1 l·∫ßn.",
            60.0
    );

    public static final HiddenWeapon PURPLE_NEEDLE = new HiddenWeapon(
            "T·ª≠ C·ª±c Ch√¢m", 4,
            200.0, 50, "T·ª± ƒë·ªông",
            "B·∫Øn 10 kim ƒë·ªôc li√™n ti·∫øp, g√¢y hi·ªáu ·ª©ng tr√∫ng ƒë·ªôc.",
            15.0
    );

    public static final HiddenWeapon SILVER_DAGGER = new HiddenWeapon(
            "L∆∞u Ng√¢n Phi√™u", 3,
            150.0, 100, "Th·ªß c√¥ng",
            "Dao phi ch√≠nh x√°c cao, xuy√™n gi√°p nh·∫π, h·ªìi 1 vi√™n sau 30s.",
            10.0
    );

    public static final HiddenWeapon PEACOCK_FEATHER = new HiddenWeapon(
            "Kh·ªïng T∆∞·ªõc Linh V≈©", 4,
            350.0, 30, "ƒê·∫∑c ch·∫ø",
            "T·∫°o hi·ªáu ·ª©ng lan, m·ªói m·ª•c ti√™u tr√∫ng gi·∫£m gi√°p 10%.",
            25.0
    );

    public static final HiddenWeapon DRAGON_RING = new HiddenWeapon(
            "Long T∆∞·ªõc Ho√†n", 5,
            400.0, 40, "T·ª± ƒë·ªông",
            "B·∫Øn 5 v√≤ng nƒÉng l∆∞·ª£ng, h√∫t k·∫ª ƒë·ªãch l·∫°i g·∫ßn trung t√¢m.",
            40.0
    );

    // ========================= DANH S√ÅCH NG∆Ø·ªúI CH∆†I & √ÅM KH√ç =========================
    private static final Map<UUID, List<HiddenWeapon>> PLAYER_WEAPONS = new HashMap<>();
    private static final Map<UUID, Long> COOLDOWNS = new HashMap<>();

    /** Nh·∫≠n √°m kh√≠ */
    public static void obtainWeapon(Player player, HiddenWeapon weapon) {
        UUID id = player.getUUID();
        PLAYER_WEAPONS.putIfAbsent(id, new ArrayList<>());
        PLAYER_WEAPONS.get(id).add(weapon);
        player.sendSystemMessage(Component.literal("üåÄ Nh·∫≠n ƒë∆∞·ª£c √Åm Kh√≠: " + weapon.name + " [" + weapon.type + "]"));
    }

    /** Hi·ªÉn th·ªã t√∫i √°m kh√≠ */
    public static void showWeapons(Player player) {
        UUID id = player.getUUID();
        List<HiddenWeapon> list = PLAYER_WEAPONS.getOrDefault(id, new ArrayList<>());
        if (list.isEmpty()) {
            player.sendSystemMessage(Component.literal("‚ö™ B·∫°n ch∆∞a c√≥ √°m kh√≠ n√†o."));
            return;
        }

        player.sendSystemMessage(Component.literal("üéØ Danh s√°ch √Åm Kh√≠ c·ªßa b·∫°n:"));
        for (HiddenWeapon w : list) {
            player.sendSystemMessage(Component.literal("- " + w.name + " | Damage: " + w.baseDamage + " | Lo·∫°i: " + w.type));
        }
    }

    /** K√≠ch ho·∫°t √°m kh√≠ */
    public static void useWeapon(Player player, String weaponName) {
        UUID id = player.getUUID();

        // Cooldown check
        if (COOLDOWNS.containsKey(id) && System.currentTimeMillis() < COOLDOWNS.get(id)) {
            player.sendSystemMessage(Component.literal("‚è≥ √Åm kh√≠ ƒëang h·ªìi chi√™u!"));
            return;
        }

        List<HiddenWeapon> list = PLAYER_WEAPONS.getOrDefault(id, new ArrayList<>());
        HiddenWeapon weapon = list.stream().filter(w -> w.name.equalsIgnoreCase(weaponName)).findFirst().orElse(null);

        if (weapon == null) {
            player.sendSystemMessage(Component.literal("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y √°m kh√≠ " + weaponName));
            return;
        }

        // Gi·∫£m ƒë·ªô b·ªÅn
        weapon.durability -= 1;
        if (weapon.durability <= 0) {
            player.sendSystemMessage(Component.literal("üí• " + weapon.name + " ƒë√£ h·ªèng v√† bi·∫øn m·∫•t!"));
            list.remove(weapon);
            return;
        }

        // K√≠ch ho·∫°t k·ªπ nƒÉng
        player.sendSystemMessage(Component.literal("üí´ K√≠ch ho·∫°t " + weapon.name + ": " + weapon.abilityDescription));
        player.sendSystemMessage(Component.literal("üí• G√¢y " + weapon.baseDamage + " damage di·ªán r·ªông!"));

        // Set cooldown
        COOLDOWNS.put(id, System.currentTimeMillis() + (long) (weapon.cooldown * 1000));
    }

    /** N√¢ng c·∫•p √°m kh√≠ */
    public static void upgradeWeapon(Player player, String weaponName) {
        UUID id = player.getUUID();
        List<HiddenWeapon> list = PLAYER_WEAPONS.getOrDefault(id, new ArrayList<>());
        HiddenWeapon weapon = list.stream().filter(w -> w.name.equalsIgnoreCase(weaponName)).findFirst().orElse(null);

        if (weapon == null) {
            player.sendSystemMessage(Component.literal("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y √°m kh√≠ ƒë·ªÉ n√¢ng c·∫•p."));
            return;
        }

        weapon.baseDamage *= 1.25;
        weapon.durability += 10;
        player.sendSystemMessage(Component.literal("üîß N√¢ng c·∫•p " + weapon.name + "! Damage tƒÉng 25%, ƒë·ªô b·ªÅn +10."));
    }

    /** T·∫°o ng·∫´u nhi√™n √°m kh√≠ khi r√®n luy·ªán */
    public static HiddenWeapon craftRandomWeapon() {
        List<HiddenWeapon> pool = List.of(TANGLOTUS, PURPLE_NEEDLE, SILVER_DAGGER, PEACOCK_FEATHER, DRAGON_RING);
        return pool.get(new Random().nextInt(pool.size()));
    }
}

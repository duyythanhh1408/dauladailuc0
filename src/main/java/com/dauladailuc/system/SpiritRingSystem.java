package com.dauladailuc.system;

import net.minecraft.world.entity.player.Player;
import net.minecraft.network.chat.Component;
import java.util.*;

/**
 * H·ªá th·ªëng H·ªìn Ho√†n (Spirit Ring System)
 * - G·∫Øn li·ªÅn v·ªõi c·∫•p ƒë·ªô h·ªìn l·ª±c (1‚Äì100)
 * - X√°c ƒë·ªãnh kh·∫£ nƒÉng h·∫•p th·ª• h·ªìn ho√†n theo m√†u v√† c·∫•p.
 * - T∆∞∆°ng th√≠ch v·ªõi song sinh / tam sinh v√µ h·ªìn.
 */

public class SpiritRingSystem {

    public enum RingColor {
        WHITE, YELLOW, PURPLE, BLACK, RED, GOD
    }

    /** C·∫•u tr√∫c d·ªØ li·ªáu H·ªìn Ho√†n */
    public static class SpiritRing {
        public final RingColor color;
        public final int age; // tu·ªïi h·ªìn th√∫
        public final String skillName;
        public final String description;

        public SpiritRing(RingColor color, int age, String skillName, String description) {
            this.color = color;
            this.age = age;
            this.skillName = skillName;
            this.description = description;
        }
    }

    /** B·∫£ng t·ªâ l·ªá h·∫•p th·ª• h·ªìn ho√†n theo c·∫•p ƒë·ªô */
    private static final Map<RingColor, int[]> BASE_RATE = new HashMap<>();

    static {
        // M·ª©c h·∫•p th·ª• c∆° b·∫£n theo c·∫•p
        BASE_RATE.put(RingColor.WHITE, new int[]{1, 20, 100});
        BASE_RATE.put(RingColor.YELLOW, new int[]{1, 30, 100});
        BASE_RATE.put(RingColor.PURPLE, new int[]{30, 50, 100});
        BASE_RATE.put(RingColor.BLACK, new int[]{50, 60, 100});
        BASE_RATE.put(RingColor.RED, new int[]{70, 90, 80}); // gi·∫£m t·ªâ l·ªá
        BASE_RATE.put(RingColor.GOD, new int[]{99, 100, 50}); // c·ª±c kh√≥
    }

    /** C·∫•u tr√∫c d·ªØ li·ªáu cho ng∆∞·ªùi ch∆°i */
    private static final Map<UUID, List<SpiritRing>> PLAYER_RINGS = new HashMap<>();

    /**
     * Th·ª≠ h·∫•p th·ª• h·ªìn ho√†n
     * @param player ng∆∞·ªùi ch∆°i
     * @param color m√†u h·ªìn ho√†n
     * @param level c·∫•p ƒë·ªô h·ªìn l·ª±c
     * @param numSpirit number of spirit (1/2/3)
     */
    public static void absorbRing(Player player, RingColor color, int level, int numSpirit) {
        int baseRate = getBaseRate(color, level);
        double bonus = 0;

        // n·∫øu c√≥ 2 ho·∫∑c 3 v√µ h·ªìn ‚Üí buff h·∫•p th·ª• h·ªìn ho√†n cao c·∫•p
        if (numSpirit == 2 && level >= 90) bonus = 15;
        if (numSpirit == 3 && level >= 90) bonus = 30;

        int finalRate = (int) Math.min(100, baseRate + bonus);
        int roll = new Random().nextInt(100) + 1;

        if (roll <= finalRate) {
            addRing(player, new SpiritRing(color, estimateAge(color), randomSkill(color),
                    "H·∫•p th·ª• th√†nh c√¥ng h·ªìn ho√†n " + color + " (" + finalRate + "%)"));
            player.sendSystemMessage(Component.literal("‚úÖ Th√†nh c√¥ng h·∫•p th·ª• h·ªìn ho√†n " + color + " (" + finalRate + "%)"));
        } else {
            player.sendSystemMessage(Component.literal("‚ùå Th·∫•t b·∫°i h·∫•p th·ª• h·ªìn ho√†n (" + roll + "/" + finalRate + "%)"));
        }
    }

    /** Th√™m h·ªìn ho√†n v√†o ng∆∞·ªùi ch∆°i */
    private static void addRing(Player player, SpiritRing ring) {
        UUID id = player.getUUID();
        PLAYER_RINGS.computeIfAbsent(id, k -> new ArrayList<>()).add(ring);
    }

    /** T√≠nh t·ªâ l·ªá c∆° b·∫£n theo m√†u v√† c·∫•p */
    private static int getBaseRate(RingColor color, int level) {
        int[] data = BASE_RATE.get(color);
        if (data == null) return 0;

        if (level < data[0]) return 0;
        if (level >= data[1]) return data[2];

        // t√≠nh t·ªâ l·ªá tuy·∫øn t√≠nh theo c·∫•p
        double ratio = (double)(level - data[0]) / (data[1] - data[0]);
        return (int)(ratio * data[2]);
    }

    /** ∆Ø·ªõc l∆∞·ª£ng tu·ªïi h·ªìn th√∫ t∆∞∆°ng ·ª©ng m√†u */
    private static int estimateAge(RingColor color) {
        return switch (color) {
            case WHITE -> 100;
            case YELLOW -> 1000;
            case PURPLE -> 10000;
            case BLACK -> 50000;
            case RED -> 100000;
            case GOD -> 1000000;
        };
    }

    /** T·∫°o k·ªπ nƒÉng ng·∫´u nhi√™n theo m√†u */
    private static String randomSkill(RingColor color) {
        return switch (color) {
            case WHITE -> "ƒê√°nh m·∫°nh +5% s√°t th∆∞∆°ng v·∫≠t l√Ω";
            case YELLOW -> "TƒÉng t·ªëc ƒë·ªô h·ªìi h·ªìn l·ª±c +10%";
            case PURPLE -> "T·∫°o l·ªõp khi√™n b·∫£o v·ªá 10s";
            case BLACK -> "S√°t th∆∞∆°ng b·∫°o k√≠ch +20%";
            case RED -> "V√µ H·ªìn B·ªôc Ph√°t ‚Äì tƒÉng 50% t·∫•t c·∫£ ch·ªâ s·ªë 10s";
            case GOD -> "Th·∫ßn k·ªπ ‚Äì bi·∫øn th√¢n trong 30s";
        };
    }

    /** Hi·ªÉn th·ªã danh s√°ch h·ªìn ho√†n ng∆∞·ªùi ch∆°i */
    public static void showPlayerRings(Player player) {
        UUID id = player.getUUID();
        List<SpiritRing> rings = PLAYER_RINGS.getOrDefault(id, new ArrayList<>());
        if (rings.isEmpty()) {
            player.sendSystemMessage(Component.literal("‚ö™ B·∫°n ch∆∞a c√≥ h·ªìn ho√†n n√†o."));
            return;
        }

        player.sendSystemMessage(Component.literal("üíÄ Danh s√°ch h·ªìn ho√†n:"));
        for (int i = 0; i < rings.size(); i++) {
            SpiritRing r = rings.get(i);
            player.sendSystemMessage(Component.literal((i+1) + ". " + r.color + " ‚Äì " + r.skillName + " (" + r.age + " nƒÉm)"));
        }
    }
}

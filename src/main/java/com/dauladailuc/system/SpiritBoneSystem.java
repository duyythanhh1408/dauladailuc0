package com.dauladailuc.system;

import net.minecraft.world.entity.player.Player;
import net.minecraft.network.chat.Component;
import java.util.*;

/**
 * H·ªÜ TH·ªêNG H·ªíN C·ªêT (Spirit Bone System)
 * - M·ªói ng∆∞·ªùi ch∆°i c√≥ 6 v·ªã tr√≠ h·ªìn c·ªët + 1 ngo·∫°i ph·ª•.
 * - H·ªìn c·ªët c√≥ th·ªÉ tƒÉng ch·ªâ s·ªë, k√≠ch ho·∫°t k·ªπ nƒÉng ƒë·∫∑c bi·ªát.
 * - Sau khi th√†nh th·∫ßn, h·ªìn c·ªët dung h·ª£p vƒ©nh vi·ªÖn.
 */

public class SpiritBoneSystem {

    public enum BoneSlot {
        HEAD, TORSO, LEFT_ARM, RIGHT_ARM, LEFT_LEG, RIGHT_LEG, EXTERNAL
    }

    public static class SpiritBone {
        public final String name;
        public final int rarity; // 1‚Äì5
        public final Map<String, Double> stats;
        public final String activeSkill;

        public SpiritBone(String name, int rarity, Map<String, Double> stats, String skill) {
            this.name = name;
            this.rarity = rarity;
            this.stats = stats;
            this.activeSkill = skill;
        }
    }

    private static final Map<UUID, Map<BoneSlot, SpiritBone>> PLAYER_BONES = new HashMap<>();

    // ========================= C√ÅC H·ªíN C·ªêT C√ì S·∫¥N =========================
    public static final SpiritBone HEAD_BONE = new SpiritBone(
            "Thi√™n Thanh Linh Nh√£n", 5,
            Map.of("crit", 15.0, "manaRegen", 10.0),
            "TƒÉng t·∫ßm nh√¨n v√† t·ª∑ l·ªá ch√≠ m·∫°ng 15%."
    );

    public static final SpiritBone ARM_BONE = new SpiritBone(
            "H·ªï Linh C·ªët", 4,
            Map.of("attack", 25.0, "armorPen", 10.0),
            "Khi t·∫•n c√¥ng c√≥ 10% c∆° h·ªôi tƒÉng s·ª©c m·∫°nh g·∫•p ƒë√¥i trong 5s."
    );

    public static final SpiritBone LEG_BONE = new SpiritBone(
            "Phong ·∫¢nh C∆∞·ªõc", 3,
            Map.of("speed", 20.0, "jump", 10.0),
            "TƒÉng t·ªëc ƒë·ªô di chuy·ªÉn v√† b·∫≠t nh·∫£y cao h∆°n."
    );

    public static final SpiritBone EXTERNAL_BONE = new SpiritBone(
            "Thi√™n S·ª© D·ª±c", 5,
            Map.of("fly", 1.0, "holyResist", 20.0),
            "Cho ph√©p bay, kh√°ng s√°t th∆∞∆°ng b√≥ng t·ªëi 20%."
    );

    // ========================= H√ÄM CH√çNH =========================

    /** Trang b·ªã h·ªìn c·ªët */
    public static void equipBone(Player player, BoneSlot slot, SpiritBone bone) {
        UUID id = player.getUUID();
        PLAYER_BONES.putIfAbsent(id, new EnumMap<>(BoneSlot.class));
        PLAYER_BONES.get(id).put(slot, bone);
        player.sendSystemMessage(Component.literal("üíÄ Trang b·ªã " + bone.name + " v√†o v·ªã tr√≠ " + slot));
    }

    /** G·ª° h·ªìn c·ªët */
    public static void unequipBone(Player player, BoneSlot slot) {
        UUID id = player.getUUID();
        if (!PLAYER_BONES.containsKey(id) || !PLAYER_BONES.get(id).containsKey(slot)) {
            player.sendSystemMessage(Component.literal("‚ö†Ô∏è Kh√¥ng c√≥ h·ªìn c·ªët ·ªü v·ªã tr√≠ n√†y."));
            return;
        }
        SpiritBone bone = PLAYER_BONES.get(id).remove(slot);
        player.sendSystemMessage(Component.literal("‚ùé G·ª° h·ªìn c·ªët " + bone.name + " kh·ªèi " + slot));
    }

    /** Hi·ªÉn th·ªã to√†n b·ªô h·ªìn c·ªët ƒëang d√πng */
    public static void showBones(Player player) {
        UUID id = player.getUUID();
        Map<BoneSlot, SpiritBone> bones = PLAYER_BONES.getOrDefault(id, new EnumMap<>(BoneSlot.class));
        if (bones.isEmpty()) {
            player.sendSystemMessage(Component.literal("‚ö™ Ch∆∞a trang b·ªã h·ªìn c·ªët n√†o."));
            return;
        }
        player.sendSystemMessage(Component.literal("ü¶¥ Danh s√°ch h·ªìn c·ªët c·ªßa b·∫°n:"));
        for (var entry : bones.entrySet()) {
            player.sendSystemMessage(Component.literal("- " + entry.getKey() + ": " + entry.getValue().name));
        }
    }

    /** √Åp d·ª•ng buff khi trang b·ªã */
    public static void applyBoneBuffs(Player player) {
        UUID id = player.getUUID();
        if (!PLAYER_BONES.containsKey(id)) return;

        Map<BoneSlot, SpiritBone> bones = PLAYER_BONES.get(id);
        double atk = 0, def = 0, spd = 0, crit = 0;

        for (SpiritBone bone : bones.values()) {
            atk += bone.stats.getOrDefault("attack", 0.0);
            def += bone.stats.getOrDefault("defense", 0.0);
            spd += bone.stats.getOrDefault("speed", 0.0);
            crit += bone.stats.getOrDefault("crit", 0.0);
        }

        player.sendSystemMessage(Component.literal(String.format(
                "‚ú® T·ªïng Buff: +%.0f ATK | +%.0f DEF | +%.0f%% SPD | +%.0f%% CRIT",
                atk, def, spd, crit
        )));
    }

    /** Dung h·ª£p h·ªìn c·ªët khi th√†nh th·∫ßn */
    public static void fuseBones(Player player) {
        UUID id = player.getUUID();
        if (!PLAYER_BONES.containsKey(id)) return;

        double totalBonus = PLAYER_BONES.get(id).size() * 5;
        PLAYER_BONES.remove(id);

        player.sendSystemMessage(Component.literal("üî• H·ªìn c·ªët dung h·ª£p! To√†n b·ªô buff ƒë∆∞·ª£c c·ªông vƒ©nh vi·ªÖn."));
        player.setHealth(player.getMaxHealth() + totalBonus);
    }

    /** K·ªπ nƒÉng k√≠ch ho·∫°t c·ªßa h·ªìn c·ªët (n·∫øu c√≥) */
    public static void activateBoneSkill(Player player, BoneSlot slot) {
        UUID id = player.getUUID();
        if (!PLAYER_BONES.containsKey(id)) return;
        SpiritBone bone = PLAYER_BONES.get(id).get(slot);
        if (bone == null) {
            player.sendSystemMessage(Component.literal("‚ö†Ô∏è Kh√¥ng c√≥ k·ªπ nƒÉng ·ªü v·ªã tr√≠ n√†y."));
            return;
        }
        player.sendSystemMessage(Component.literal("üí´ K√≠ch ho·∫°t k·ªπ nƒÉng h·ªìn c·ªët: " + bone.activeSkill));
    }
}

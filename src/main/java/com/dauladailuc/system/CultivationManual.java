package com.dauladailuc.system;

import net.minecraft.world.entity.player.Player;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.network.chat.Component;

import java.util.HashMap;
import java.util.Map;

/**
 * H·ªá th·ªëng C√¥ng Ph√°p & B√≠ K·ªπ ‚Äì Cultivation Manual System
 * M·ªói ng∆∞·ªùi ch∆°i c√≥ th·ªÉ luy·ªán t·ªëi ƒëa 3 c√¥ng ph√°p + 2 b√≠ k·ªπ.
 * C√¥ng ph√°p gi√∫p tu luy·ªán nhanh h∆°n, b√≠ k·ªπ l√† k·ªπ nƒÉng k√≠ch ho·∫°t m·∫°nh t·∫°m th·ªùi.
 */

public class CultivationManual {

    // Danh s√°ch c√¥ng ph√°p & b√≠ k·ªπ
    private static final Map<String, ManualData> MANUALS = new HashMap<>();

    static {
        // üå´Ô∏è Qu·ª∑ ·∫¢nh M√™ Tung ‚Äì di chuy·ªÉn n√© tr√°nh
        MANUALS.put("Qu·ª∑ ·∫¢nh M√™ Tung", new ManualData("C√¥ng ph√°p", "Di chuy·ªÉn nhanh, n√© ƒë√≤n", 60) {
            @Override
            public void activate(Player player) {
                player.sendSystemMessage(Component.literal("üå´Ô∏è K√≠ch ho·∫°t Qu·ª∑ ·∫¢nh M√™ Tung!"));
                player.addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SPEED, 300, 4));
                player.addEffect(new MobEffectInstance(MobEffects.INVISIBILITY, 300, 0));
            }
        });

        // ‚úã Huy·ªÅn Ng·ªçc Th·ªß ‚Äì tƒÉng c√¥ng tay tr·∫ßn
        MANUALS.put("Huy·ªÅn Ng·ªçc Th·ªß", new ManualData("C√¥ng ph√°p", "C∆∞·ªùng h√≥a tay tr·∫ßn, xuy√™n gi√°p", 90) {
            @Override
            public void activate(Player player) {
                player.sendSystemMessage(Component.literal("‚úã Huy·ªÅn Ng·ªçc Th·ªß ƒë∆∞·ª£c k√≠ch ho·∫°t!"));
                player.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, 900, 2));
                player.addEffect(new MobEffectInstance(MobEffects.LIFE_BOOST, 900, 1));
            }
        });

        // üëÅÔ∏è T·ª≠ C·ª±c Ma ƒê·ªìng ‚Äì nh√¨n xuy√™n ·∫£o ·∫£nh
        MANUALS.put("T·ª≠ C·ª±c Ma ƒê·ªìng", new ManualData("C√¥ng ph√°p", "Nh√¨n xuy√™n b√≥ng t·ªëi, kh√≥i, ·∫£o ·∫£nh", 120) {
            @Override
            public void activate(Player player) {
                player.sendSystemMessage(Component.literal("üëÅÔ∏è M·ªü T·ª≠ C·ª±c Ma ƒê·ªìng!"));
                player.addEffect(new MobEffectInstance(MobEffects.NIGHT_VISION, 2400, 0));
                player.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, 600, 1));
            }
        });

        // üíâ B·ªì ƒê·ªÅ Huy·∫øt ‚Äì b√≠ ph√°p hy sinh m√°u ƒë·ªÉ tƒÉng s·ª©c m·∫°nh
        MANUALS.put("B·ªì ƒê·ªÅ Huy·∫øt", new ManualData("B√≠ k·ªπ", "Hy sinh 30% HP, tƒÉng 100% s√°t th∆∞∆°ng", 120) {
            @Override
            public void activate(Player player) {
                player.sendSystemMessage(Component.literal("üíâ B·ªì ƒê·ªÅ Huy·∫øt b·ªôc ph√°t!"));
                player.hurt(player.damageSources().magic(), (float)(player.getMaxHealth() * 0.3));
                player.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, 600, 5));
                player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 600, 1));
            }
        });

        // ‚öñÔ∏è Quan √Çm H·ªØu L·ªá ‚Äì d·ªìn s·ª©c v√†o m·ªôt c√∫ ƒë√°nh duy nh·∫•t
        MANUALS.put("Quan √Çm H·ªØu L·ªá", new ManualData("B√≠ k·ªπ", "D·ªìn to√†n b·ªô s·ª©c m·∫°nh v√†o m·ªôt ƒë√≤n", 180) {
            @Override
            public void activate(Player player) {
                player.sendSystemMessage(Component.literal("‚öñÔ∏è Thi tri·ªÉn Quan √Çm H·ªØu L·ªá!"));
                player.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, 200, 10));
                player.addEffect(new MobEffectInstance(MobEffects.WEAKNESS, 1000, 1)); // y·∫øu sau ƒë√≥
            }
        });
    }

    /** K√≠ch ho·∫°t c√¥ng ph√°p / b√≠ k·ªπ */
    public static void activateManual(Player player, String name) {
        ManualData manual = MANUALS.get(name);
        if (manual == null) {
            player.sendSystemMessage(Component.literal("‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng ph√°p ho·∫∑c b√≠ k·ªπ: " + name));
            return;
        }

        if (manual.isOnCooldown(player)) {
            long remaining = manual.getRemainingCooldown(player);
            player.sendSystemMessage(Component.literal("‚åõ C√≤n " + remaining + "s m·ªõi c√≥ th·ªÉ d√πng l·∫°i."));
        } else {
            manual.triggerCooldown(player);
            manual.activate(player);
        }
    }

    /** Danh s√°ch t·∫•t c·∫£ c√¥ng ph√°p hi·ªán c√≥ */
    public static Map<String, ManualData> getManuals() {
        return MANUALS;
    }

    /** L·ªõp d·ªØ li·ªáu m√¥ t·∫£ t·ª´ng c√¥ng ph√°p/b√≠ k·ªπ */
    public static abstract class ManualData {
        private final String type;
        private final String desc;
        private final int cooldown; // gi√¢y
        private final Map<UUID, Long> lastUsed = new HashMap<>();

        public ManualData(String type, String desc, int cooldown) {
            this.type = type;
            this.desc = desc;
            this.cooldown = cooldown;
        }

        public abstract void activate(Player player);

        public boolean isOnCooldown(Player player) {
            UUID id = player.getUUID();
            if (!lastUsed.containsKey(id)) return false;
            long diff = (System.currentTimeMillis() - lastUsed.get(id)) / 1000;
            return diff < cooldown;
        }

        public void triggerCooldown(Player player) {
            lastUsed.put(player.getUUID(), System.currentTimeMillis());
        }

        public long getRemainingCooldown(Player player) {
            UUID id = player.getUUID();
            if (!lastUsed.containsKey(id)) return 0;
            long diff = (System.currentTimeMillis() - lastUsed.get(id)) / 1000;
            return Math.max(0, cooldown - diff);
        }

        public String getType() { return type; }
        public String getDesc() { return desc; }
        public int getCooldown() { return cooldown; }
    }
}
